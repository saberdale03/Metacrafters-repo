{"ast":null,"code":"var _jsxFileName = \"D:\\\\dale_\\\\Documents\\\\Codes\\\\PracticeCoding\\\\ReactJS\\\\chatbot\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Chatbot extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const userMessage = event.target.elements.userInput.value;\n      //Set messages state\n      this.setState({\n        messages: [...this.state.messages, {\n          type: 'user',\n          message: userMessage\n        }]\n      });\n      event.target.elements.userInput.value = '';\n      this.sendMessage(userMessage);\n    };\n    this.sendMessage = async userMessage => {\n      const openaiEndpoint = 'https://api.openai.com/v1/chat/completions';\n      const openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\n      const model = 'gpt-3.5-turbo';\n      const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${openaiApiKey}`\n      };\n      const data = {\n        'model': model,\n        'messages': [{\n          \"role\": \"user\",\n          \"content\": userMessage\n        }]\n      };\n      axios.post(openaiEndpoint, data, {\n        headers\n      }).then(response => {\n        const chatResponse = response.data.choices[0].message.content;\n        console.log(chatResponse);\n        // Do something with the chat response\n      }).catch(error => {\n        console.error(error);\n        // Handle the error\n      });\n    };\n    this.state = {\n      messages: []\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: this.state.messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: message.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"userInput\",\n          placeholder: \"Type your message here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Chatbot;","map":{"version":3,"names":["React","Component","axios","jsxDEV","_jsxDEV","Chatbot","constructor","props","handleSubmit","event","preventDefault","userMessage","target","elements","userInput","value","setState","messages","state","type","message","sendMessage","openaiEndpoint","openaiApiKey","process","env","REACT_APP_OPENAI_API_KEY","model","headers","data","post","then","response","chatResponse","choices","content","console","log","catch","error","render","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","placeholder"],"sources":["D:/dale_/Documents/Codes/PracticeCoding/ReactJS/chatbot/src/App.js"],"sourcesContent":["import './App.css';\nimport React, {Component} from 'react';\nimport axios from \"axios\";\n\n class Chatbot extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n    };\n  }\n\n  handleSubmit =(event)=> {\n    event.preventDefault();\n    const userMessage = event.target.elements.userInput.value\n    //Set messages state\n    this.setState({ messages: [...this.state.messages, { type: 'user', message: userMessage }] });\n    event.target.elements.userInput.value = ''\n    this.sendMessage(userMessage)\n  }\n\n  sendMessage = async (userMessage) => {\n    const openaiEndpoint = 'https://api.openai.com/v1/chat/completions';\n    const openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\n    const model = 'gpt-3.5-turbo';\n    \n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${openaiApiKey}`\n    };\n    \n    const data = {\n      'model': model,\n      'messages': [{\"role\": \"user\", \"content\": userMessage}]\n    };\n    \n    axios.post(openaiEndpoint, data, { headers })\n    .then(response => {\n      const chatResponse = response.data.choices[0].message.content;\n      console.log(chatResponse);\n      // Do something with the chat response\n    })\n    .catch(error => {\n      console.error(error);\n      // Handle the error\n    });\n  };\n  \n  \n  render(){\n    return (\n      <div className=\"chatbot\">\n        <div className=\"chat-window\">\n          {this.state.messages.map((message, index) => (\n            <div key={index} className={`message ${message.type}`}>\n              {message.message}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"userInput\" placeholder=\"Type your message here\" />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    );\n  }\n\n }\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}